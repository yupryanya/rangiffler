services:
  mysql-auth:
    container_name: rangiffler-auth-db
    image: mysql:8.0.33
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: rangiffler-auth
      TZ: GMT+3
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rangiffler-network

  mysql-country:
    container_name: rangiffler-country-db
    image: mysql:8.0.33
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: rangiffler-country
      TZ: GMT+3
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rangiffler-network

  mysql-photo:
    container_name: rangiffler-photo-db
    image: mysql:8.0.33
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: rangiffler-photo
      TZ: GMT+3
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rangiffler-network

  mysql-userdata:
    container_name: rangiffler-userdata-db
    image: mysql:8.0.33
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: rangiffler-userdata
      TZ: GMT+3
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rangiffler-network


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - rangiffler-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - 9092:9092
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    networks:
      - rangiffler-network

  auth.rangiffler.dc:
    container_name: auth.rangiffler.dc
    image: ${PREFIX}/rangiffler-auth-docker:latest
    ports:
      - 9000:9000
    healthcheck:
      test: "wget --spider http://localhost:9000/actuator/health || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    depends_on:
      mysql-auth:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - rangiffler-network

  country.rangiffler.dc:
    container_name: country.rangiffler.dc
    image: ${PREFIX}/rangiffler-country-docker:latest
    ports:
      - 8091:8091
      - 8092:8092
    restart: always
    depends_on:
      mysql-country:
        condition: service_healthy
    networks:
      - rangiffler-network

  gateway.rangiffler.dc:
    container_name: gateway.rangiffler.dc
    image: ${PREFIX}/rangiffler-gateway-docker:latest
    ports:
      - 8090:8090
    healthcheck:
      test: "wget --spider http://localhost:8090/actuator/health || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    depends_on:
      auth.rangiffler.dc:
        condition: service_healthy
    networks:
      - rangiffler-network

  photo.rangiffler.dc:
    container_name: photo.rangiffler.dc
    image: ${PREFIX}/rangiffler-photo-docker:latest
    ports:
      - 8093:8093
      - 8094:8094
    restart: always
    depends_on:
      mysql-photo:
        condition: service_healthy
    networks:
      - rangiffler-network

  userdata.rangiffler.dc:
    container_name: userdata.rangiffler.dc
    image: ${PREFIX}/rangiffler-userdata-docker:latest
    ports:
      - 8095:8095
      - 8096:8096
    restart: always
    depends_on:
      auth.rangiffler.dc:
        condition: service_healthy
      mysql-userdata:
        condition: service_healthy
    networks:
      - rangiffler-network

  frontend.rangiffler.dc:
    container_name: frontend.rangiffler.dc
    image: ${PREFIX}/rangiffler-gql-client-docker:latest
    build:
      context: ./rangiffler-gql-client
      dockerfile: ./Dockerfile
      args:
        NPM_COMMAND: build:docker
    ports:
      - 80:80
    depends_on:
      gateway.rangiffler.dc:
        condition: service_started
    networks:
      - rangiffler-network

  selenoid:
    profiles: [ test ]
    container_name: selenoid
    image: aerokube/selenoid:1.11.3
    platform: linux/${ARCH}
    volumes:
      - ./selenoid:/etc/selenoid
      - /var/run/docker.sock:/var/run/docker.sock
      - ./selenoid/browsers.json:/etc/selenoid/browsers.json
    environment:
      - TZ=UTC+4
    restart: unless-stopped
    command: [ "-conf", "/etc/selenoid/browsers.json", "-limit", "3", "-video-output-dir", "/opt/selenoid/video", "-log-output-dir", "/opt/selenoid/logs", "-container-network", "rangiffler-master_rangiffler-network" ]
    ports:
      - 4444:4444
    networks:
      - rangiffler-network

  selenoid-ui:
    profiles: [ test ]
    container_name: selenoid-ui
    image: aerokube/selenoid-ui:1.10.11
    depends_on:
      - selenoid
    restart: unless-stopped
    ports:
      - 9091:8080
    command: [ "--selenoid-uri", "http://selenoid:4444" ]
    networks:
      - rangiffler-network

  rangiffler-e-2-e:
    profiles: [ test ]
    container_name: rangiffler-e-2-e
    image: ${PREFIX}/rangiffler-e-2-e-tests:latest
    build:
      context: ./
      dockerfile: ./rangiffler-e-2-e-tests/Dockerfile
    environment:
      - ALLURE_DOCKER_API=${ALLURE_DOCKER_API}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - BUILD_URL=${BUILD_URL}
      - HEAD_COMMIT_MESSAGE=${HEAD_COMMIT_MESSAGE}
      - EXECUTION_TYPE=${EXECUTION_TYPE}
      - REMOTE_BROWSER=${BROWSER}
    depends_on:
      frontend.rangiffler.dc:
        condition: service_started
    networks:
      - rangiffler-network

  allure:
    profiles: [ test ]
    container_name: allure
    image: frankescobar/allure-docker-service:2.27.0
    depends_on:
      - rangiffler-e-2-e
    environment:
      - CHECK_RESULTS_EVERY_SECONDS=NONE
      - KEEP_HISTORY=1
    ports:
      - 5050:5050
    networks:
      - rangiffler-network

  allure-ui:
    profiles: [ test ]
    container_name: allure-ui
    image: frankescobar/allure-docker-service-ui:7.0.3
    depends_on:
      - allure
    environment:
      - ALLURE_DOCKER_PUBLIC_API_URL=http://localhost:5050
    ports:
      - 5252:5252
    networks:
      - rangiffler-network

networks:
  rangiffler-network:
    driver: bridge
